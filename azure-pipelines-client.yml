trigger:
  paths:
    include:
      - "client/*"

parameters:
  - name: AgentSelect
    displayName: Select Agent
    type: string
    default: Azure Pipelines
    values:
      - Default
      - Azure Pipelines
  - name: UnitTests
    displayName: Run unit tests
    type: boolean
    default: true
  - name: UiTests
    displayName: Run ui tests
    type: boolean
    default: true
  - name: PublishImage
    displayName: Publish docker image
    type: boolean
    default: false

jobs:
  - job: build
    displayName: Build wordki client

    pool:
      name: ${{ parameters.AgentSelect }}

    steps:
      - task: DockerCompose@0
        displayName: Build
        inputs:
          containerregistrytype: "Container Registry"
          dockerRegistryEndpoint: "docker-hub"
          dockerComposeFile: "client/ci/docker/docker-compose.build.yml"
          projectName: "ks_wordki"
          action: "Run a Docker Compose command"
          dockerComposeCommand: build
      - task: CmdLine@2
        displayName: Run tests
        enabled: ${{ parameters.UnitTests }}
        inputs:
          script: docker-compose -f ./client/ci/docker/docker-compose.test.yml up --abort-on-container-exit
      - task: CmdLine@2
        enabled: ${{ parameters.UnitTests }}
        continueOnError: true
        displayName: Copy test results
        inputs:
          script: |
            docker ps -a
            docker cp wordki-client.ci.test:/usr/src/app/junit.xml $(System.DefaultWorkingDirectory)/junit.xml
            docker cp wordki-client.ci.test:/usr/src/app/coverage $(System.DefaultWorkingDirectory)/coverage
      - task: DockerCompose@0
        enabled: ${{ parameters.UiTests }}
        displayName: Run UI Tests
        continueOnError: true
        inputs:
          containerregistrytype: "Container Registry"
          dockerRegistryEndpoint: "docker-hub"
          dockerComposeFile: "client/ci/docker/docker-compose.e2e.yml"
          projectName: "ks_wordki"
          action: "Run a Docker Compose command"
          dockerComposeCommand: up --build --abort-on-container-exit
      - task: CmdLine@2
        enabled: ${{ parameters.UiTests }}
        continueOnError: true
        displayName: Copy ui test results
        inputs:
          script: |
            docker ps -a
            docker cp wordki.ci.e2e.tests:/src/TestResults/TestResults.xml $(System.DefaultWorkingDirectory)/TESTS-ui-e2e.xml
      - task: PublishTestResults@2
        enabled: ${{ parameters.UnitTests }}
        continueOnError: true
        displayName: Publish test results
        inputs:
          testResultsFormat: "JUnit"
          searchFolder: $(System.DefaultWorkingDirectory)
          testResultsFiles: "junit.xml"
      - task: PublishCodeCoverageResults@1
        enabled: ${{ parameters.UnitTests }}
        continueOnError: true
        displayName: Publish code coverage
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"
      - task: PublishTestResults@2
        enabled: ${{ parameters.UiTests }}
        continueOnError: true
        displayName: Publish ui test results
        inputs:
          testResultsFormat: "JUnit"
          searchFolder: $(System.DefaultWorkingDirectory)
          testResultsFiles: "TESTS-ui-e2e.xml"
      - task: DockerCompose@0
        displayName: Release
        inputs:
          containerregistrytype: "Container Registry"
          dockerRegistryEndpoint: "docker-hub"
          dockerComposeFile: "client/ci/docker/docker-compose.release.yml"
          projectName: "ks_wordki"
          action: "Run a Docker Compose command"
          dockerComposeCommand: build
      - task: Docker@2
        enabled: ${{ parameters.PublishImage }}
        displayName: Login to Docker Hub
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          containerRegistry: "docker-hub"
          command: "login"
      - task: CmdLine@2
        enabled: ${{ parameters.PublishImage }}
        displayName: Tag Docker Image
        inputs:
          script: "docker tag kamilsoloducha/wordki-client:$(Build.BuildId) kamilsoloducha/wordki-client:latest"
      - task: Docker@2
        enabled: ${{ parameters.PublishImage }}
        displayName: Push
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          containerRegistry: "docker-hub"
          repository: "kamilsoloducha/wordki-client"
          command: "push"
          tags: |
            $(Build.BuildId)
