CREATE SCHEMA IF NOT EXISTS cards;

CREATE TABLE cards."Owners" (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "UserId" uuid NOT NULL,
    CONSTRAINT "PK_Owners" PRIMARY KEY ("Id")
);

CREATE TABLE cards."Sides" (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "Label" text NULL,
    "Example" text NULL,
    CONSTRAINT "PK_Sides" PRIMARY KEY ("Id")
);

CREATE TABLE cards."Groups" (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "ParentId" bigint NULL,
    "Front" text NOT NULL,
    "Back" text NOT NULL,
    "OwnerId" bigint NULL,
    CONSTRAINT "PK_Groups" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Groups_Owners_OwnerId" FOREIGN KEY ("OwnerId") REFERENCES cards."Owners" ("Id")
);

CREATE TABLE cards."Cards" (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "FrontId" bigint NULL,
    "BackId" bigint NULL,
    "GroupId" bigint NULL,
    CONSTRAINT "PK_Cards" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Cards_Groups_GroupId" FOREIGN KEY ("GroupId") REFERENCES cards."Groups" ("Id"),
    CONSTRAINT "FK_Cards_Sides_BackId" FOREIGN KEY ("BackId") REFERENCES cards."Sides" ("Id"),
    CONSTRAINT "FK_Cards_Sides_FrontId" FOREIGN KEY ("FrontId") REFERENCES cards."Sides" ("Id")
);

CREATE TABLE cards."Details" (
    "SideType" integer NOT NULL,
    "CardId" bigint NOT NULL,
    "Drawer" SMALLINT NOT NULL,
    "Counter" SMALLINT NOT NULL,
    "IsQuestion" boolean NOT NULL,
    "IsTicked" boolean NOT NULL,
    "NextRepeat" timestamp without time zone NULL,
    CONSTRAINT "PK_Details" PRIMARY KEY ("CardId", "SideType"),
    CONSTRAINT "FK_Details_Cards_CardId" FOREIGN KEY ("CardId") REFERENCES cards."Cards" ("Id") ON DELETE CASCADE
);

CREATE INDEX "IX_Cards_BackId" ON cards."Cards" ("BackId");

CREATE INDEX "IX_Cards_FrontId" ON cards."Cards" ("FrontId");

CREATE INDEX "IX_Cards_GroupId" ON cards."Cards" ("GroupId");

CREATE INDEX "IX_Cards_Id" ON cards."Cards" ("Id");

CREATE INDEX "IX_Details_CardId_SideType" ON cards."Details" ("CardId", "SideType");

CREATE INDEX "IX_Groups_Id" ON cards."Groups" ("Id");

CREATE INDEX "IX_Groups_OwnerId" ON cards."Groups" ("OwnerId");

CREATE INDEX "IX_Owners_Id" ON cards."Owners" ("Id");

CREATE INDEX "IX_Sides_Id" ON cards."Sides" ("Id");


CREATE SCHEMA IF NOT EXISTS lessons;

CREATE TABLE lessons."Performances" (
    "Id" uuid NOT NULL,
    "UserId" uuid NOT NULL,
    CONSTRAINT "PK_Performances" PRIMARY KEY ("Id")
);

CREATE TABLE lessons."Lessons" (
    "StartDate" timestamp without time zone NOT NULL,
    "UserId" uuid NOT NULL,
    "Type" integer NOT NULL,
    "TimeCounter" integer NOT NULL,
    "PerformenceId" uuid NULL,
    CONSTRAINT "PK_Lessons" PRIMARY KEY ("UserId", "StartDate"),
    CONSTRAINT "FK_Lessons_Performances_PerformenceId" FOREIGN KEY ("PerformenceId") REFERENCES lessons."Performances" ("Id")
);

CREATE INDEX "IX_Lessons_PerformenceId" ON lessons."Lessons" ("PerformenceId");
CREATE SCHEMA IF NOT EXISTS users;

CREATE TABLE users."Users" (
    "Id" uuid NOT NULL,
    "Name" text NOT NULL,
    "Password" text NOT NULL,
    "Email" text NULL,
    "FirstName" text NULL,
    "Surname" text NULL,
    "CreationDate" timestamp without time zone NOT NULL,
    "Status" integer NOT NULL,
    "ConfirmationDate" timestamp without time zone NOT NULL,
    "LoginDate" timestamp without time zone NOT NULL,
    CONSTRAINT "PK_Users" PRIMARY KEY ("Id")
);

CREATE TABLE users."Roles" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Type" integer NOT NULL,
    "UserId" uuid NULL,
    CONSTRAINT "PK_Roles" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Roles_Users_UserId" FOREIGN KEY ("UserId") REFERENCES users."Users" ("Id")
);

CREATE INDEX "IX_Roles_UserId" ON users."Roles" ("UserId");

CREATE OR REPLACE VIEW cards.Repeats AS
SELECT 
random() AS "Random",
d."SideType" as "SideType",
d."CardId" as "CardId",
q."Label" as "Question",
a."Label" as "Answer",
q."Example" as "QuestionExample",
a."Example" as "AnswerExample",
d."IsQuestion" as "LessonIncluded",
d."NextRepeat" as "NextRepeat",
d."Drawer" as "QuestionDrawer",
case when d."SideType" = 1 then g."Front" else g."Back" end as "QuestionLanguage",
case when d."SideType" = 1 then g."Back" else g."Front" end as "AnswerLanguage",
o."UserId" as "UserId",
g."Id" as "GroupId"
from cards."Details" d
join cards."Cards" c ON c."Id" = d."CardId"
join cards."Sides" q ON (q."Id" = c."BackId" and d."SideType" = 2) OR (q."Id" = c."FrontId" and d."SideType" = 1)
join cards."Sides" a ON (a."Id" = c."FrontId" and d."SideType" = 2) OR (a."Id" = c."BackId" and d."SideType" = 1)
join cards."Groups" g ON g."Id" = c."GroupId"
join cards."Owners" o ON o."Id" = g."OwnerId"
ORDER BY 1;

CREATE OR REPLACE VIEW cards.grouptolesson AS
select 
o."UserId" as "OwnerId",
g."Id" AS "Id",
g."Name" AS "Name",
g."Front" AS "Front",
g."Back" AS "Back",
COUNT(CASE f."IsQuestion" when true then null else 1 end) as "FrontCount",
COUNT(CASE b."IsQuestion" when true then null else 1 end) as "BackCount"
from cards."Groups" g
join cards."Owners" o ON o."Id" = g."OwnerId"
join cards."Cards" c ON c."GroupId" = g."Id"
join cards."Details" f ON f."CardId" = c."Id" and f."SideType" = 1
join cards."Details" b ON b."CardId" = c."Id" and b."SideType" = 2
group by g."Id", o."UserId";